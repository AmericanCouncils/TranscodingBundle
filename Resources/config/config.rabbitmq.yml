# Note that in order for the consumer to actually load and process jobs, you still need to configure
# the RabbitMQBundle properly and call the `transcoding.rabbitmq.consumer` service as the 'callback'
# for the exchange defined in your apps configuration

parameters:
	transcoding.rabbitmq.consumer.class: AC\TranscodingBundle\RabbitMQ\Consumer
    transcoding.rabbitmq.consumer.conflictMode: 3
    transcoding.rabbitmq.consumer.dirMode: 2
    transcoding.rabbitmq.consumer.failMode: 2

services:
    transcoding.rabbitmq.consumer:
        class: %transcoding.rabbitmq.consumer.class%
        arguments:
            - @transcoder
            - %transcoding.rabbitmq.consumer.conflictMode%
            - %transcoding.rabbitmq.consumer.dirMode%
            - %transcoding.rabbitmq.consumer.failMode%
